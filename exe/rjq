#!/usr/bin/env ruby

require 'json'
require 'optparse'

module Rjq
  class Parser
    def initialize(options)
      @options = options
    end

    def parse(io)
      # TODO: Make buf_size small
      buf_size = 4096 * 256

      builder = Builder.new(@options) { |o| yield(o) }

      while (buf = io.read(buf_size)) != nil
        builder << buf
      end
    end
  end

  class Builder
    def initialize(options, &built)
      @options = options
      @built   = built
    end

    def <<(buf)
      buffer = buf

      # TODO: Support streaming JSON
      object = JSON.parse(buffer, symbolize_names: symbolize_names?)

      @built.call(object)
    end

    private

    def symbolize_names?
      @options[:symbolize_names]
    end
  end

  class Printer
    def initialize(options)
      @options = options
    end

    def print(object)
      object = [object] if !unwrap?

      object.each do |o|
        puts JSON.pretty_generate(o)
      end
    end

    def unwrap?
      @options[:unwrap]
    end
  end

  class CLI
    def self.start(*argv)
      options = { unwrap: false, symbolize_names: true }

      opt.on('--[no-]unwrap')          { |v| options[:unwrap] = v }

      opt.on('--[no-]symbolize_names') { |v| options[:symbolize_names] = v }

      command, *files = opt.parse(argv)

      files = build_files(files)

      new(options).start(command, files)
    end

    def self.opt
      @opt ||= OptionParser.new
    end

    def self.build_files(files)
      if File.pipe?($stdin)
        return [$stdin]
      end

      files.lazy.map { |file| File.open(file) }
    end

    attr_reader :parser, :printer

    def initialize(options)
      @printer = Printer.new(unwrap: options[:unwrap])
      @parser  = Parser.new(symbolize_names: options[:symbolize_names])
    end

    def start(command, files)
      files.each do |file|
        parser.parse(file) do |object|
          object = object.instance_eval(command)

          printer.print(object)
        end
      end
    end
  end
end

if __FILE__ == $0
  Rjq::CLI.start(*ARGV)
end
